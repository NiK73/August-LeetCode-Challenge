from collections import defaultdict
class TrieNode:
    
    def __init__(self):
        
        self.dict = defaultdict(TrieNode)
        self.is_word = False

class StreamChecker:

    def __init__(self, words: List[str]):
        self.prefix = ''
        self.trie = TrieNode()
        for word in words:
            cur_node = self.trie
            word = word[::-1]
            for char in word:                
                cur_node = cur_node.dict[ char ]
            cur_node.is_word = True
    def query(self, letter: str) -> bool:
        self.prefix += letter
        cur_node = self.trie
        for char in reversed(self.prefix):
            if char not in cur_node.dict:
                break
            cur_node = cur_node.dict[char]
            if cur_node.is_word:
                return True
        return False



# Your StreamChecker object will be instantiated and called as such:
# obj = StreamChecker(words)
# param_1 = obj.query(letter)
